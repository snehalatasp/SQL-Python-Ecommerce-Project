create database Ecommerce;
-- 1. List all unique cities where customers are located.
select distinct customer_city 
from customers;

-- 2. Count the number of orders placed in 2017.
select count(order_id) from orders where year(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category.
select products.product_category, round(sum(payments.payment_value),2) as sales
from products join order_items
on products.product_id = order_items.product_id
join payments
on payments.order_id = order_items.order_id
group by products.product_category order by sales desc;

-- 4. Calculate the percentage of orders that were paid in installments.
select (sum(case when payment_installments >= 1 then 1 else 0 end))/count(*)*100 as installment_payment
from payments;

-- 5. Count the number of customers from each state.
select customer_state, count(customer_id)
from customers
group by customer_state;

-- 6. Calculate the number of orders per month in 2018.
Select monthname(order_purchase_timestamp) months, count(order_id) order_count
from orders 
where year(order_purchase_timestamp) = 2018
group by months;

-- 7. Find the average number of products per order, grouped by customer city.
with count_per_order as
(select orders.order_id, orders.customer_id,count(order_items.order_id) order_item_count
from orders 
join order_items
on orders.order_id = order_items.order_id
group by orders.order_id, orders.customer_id)
select customers.customer_city,round(avg(count_per_order.order_item_count),2) avg_orders
from customers
join count_per_order
on customers.customer_id = count_per_order.customer_id
group by customers.customer_city;

-- 8. Calculate the percentage of total revenue contributed by each product category.
select products.product_category,round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) total_sales
from products
join order_items
on products.product_id = order_items.product_id
join payments
on payments.order_id = order_items.order_id
group by products.product_category 
order by total_sales desc;

-- find the total revenue
WITH sales_per_category AS (
    SELECT 
        products.product_category,
        ROUND((SUM(payments.payment_value) / (SELECT SUM(payment_value) FROM payments)) * 100, 2) AS total_sales
    FROM products
    JOIN order_items ON products.product_id = order_items.product_id
    JOIN payments ON payments.order_id = order_items.order_id
    GROUP BY products.product_category
    ORDER BY total_sales DESC
)
SELECT SUM(total_sales) AS total_of_total_sales
FROM sales_per_category;


-- 9. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category, count(products.product_id) as total_products,round(avg(order_items.price),2) prices
from products
join order_items
on products.product_id = order_items.product_id
group by product_category;

-- 10.  Calculate the total revenue generated by each seller, and rank them by revenue.
select *, dense_rank()over(order by revenue desc) as ranking
from (select order_items.seller_id, round(sum(payments.payment_value),2)revenue
FROM payments
join order_items
on payments.order_id = order_items.order_id
group by seller_id
order by revenue) as sale;

-- 11. Calculate the moving average of order values for each customer over their order history.
select customer_id,order_purchase_timestamp,payment, avg(payment) over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row)as mov_avg
from (select orders.customer_id, orders.order_purchase_timestamp, payments.payment_value as payment
from payments
join orders
on orders.order_id = payments.order_id) as a;
